Подскажи по структуре каталогов и файлов. как мне реализовать фронтенд приложения на next.js, которое должно содержать:
1. Основую часть (доступную всем пользователям)
2. Основную часть с расширенными данными (для авторизовавшихся пользователей)
3. Админку (для авторизовавшихся пользователей с правами администратора)


Основная часть:
- Главная страница
- Каталог продуктов catalog/
- Каталог категорий продуктов (вложенная структура) catalog/[slug]/[slug]
- Детальная страница продукта product/[slug]
- Каталог новостей news/
- Детальная страница новости news/[slug]
- Каталог проектов projects/
- Каталог категорий проектов projects/[slug]
- Детальная страница проекта projects/[slug]/[slug]
- Контакты
- О компании
- Услуги
- Корзина
- Оформление заказа
- Личный кабинет
- Регистрация
- Вход
- 404
- 500

Основная часть с расширенными данными:
- Каталог продуктов с ценами
- Детальная страница продукта с ценами и возможностью добавить в корзину
- Корзина с возможностью удалить продукт или оформить заказ

Админка:
- Новости
- Детальная страница новости
- Каталог проектов
- Детальная страница проекта



Я предлагаю следующую структуру каталогов для вашего Next.js приложения:

```
src/
├── app/
│   ├── (public)/               # Публичная часть сайта
│   │   ├── page.tsx            # Главная страница
│   │   ├── about/
│   │   ├── services/
│   │   ├── contacts/
│   │   ├── catalog/
│   │   │   ├── page.tsx
│   │   │   └── [category]/
│   │   │       └── [subcategory]/
│   │   ├── product/
│   │   │   └── [slug]/
│   │   ├── news/
│   │   │   ├── page.tsx
│   │   │   └── [slug]/
│   │   ├── projects/
│   │   │   ├── page.tsx
│   │   │   └── [category]/
│   │   │       └── [slug]/
│   │   ├── cart/
│   │   ├── checkout/
│   │   ├── auth/
│   │   │   ├── login/
│   │   │   └── register/
│   │   └── profile/
│   │
│   ├── (authenticated)/        # Часть для авторизованных пользователей
│   │   ├── catalog/            # Каталог с ценами
│   │   ├── product/            # Продукты с ценами
│   │   └── cart/              # Расширенная корзина
│   │
│   ├── (admin)/               # Админ-панель
│   │   ├── layout.tsx
│   │   ├── news/
│   │   │   ├── page.tsx
│   │   │   └── [id]/edit/
│   │   └── projects/
│   │       ├── page.tsx
│   │       └── [id]/edit/
│   │
│   ├── error.tsx              # Обработка ошибок
│   └── not-found.tsx          # 404 страница
│
├── components/                # Переиспользуемые компоненты
│   ├── ui/                   # UI компоненты
│   ├── layout/               # Компоненты макета
│   └── forms/                # Формы
│
├── lib/                      # Утилиты и хелперы
│   ├── auth/                 # Аутентификация
│   └── api/                  # API клиенты
│
└── types/                    # TypeScript типы
```

Основные особенности этой структуры:

1. **Группировка маршрутов**:
   - `(public)` - общедоступные страницы
   - `(authenticated)` - страницы для авторизованных пользователей
   - `(admin)` - админ-панель
   
2. **Динамические маршруты**:
   - `[slug]` для динамических страниц
   - Вложенные динамические маршруты для категорий

3. **Разделение компонентов**:
   - `components/ui` - базовые UI компоненты
   - `components/layout` - компоненты макета
   - `components/forms` - формы

4. **Middleware**:
   - Можно добавить middleware.ts в корень для защиты маршрутов
   - Проверка аутентификации для разделов (authenticated) и (admin)

5. **Организация кода**:
   - Отдельные папки для утилит, типов и API клиентов
   - Четкое разделение бизнес-логики и представления

Для защиты маршрутов можно создать middleware.ts:

```typescript:src/middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Проверка аутентификации для защищенных маршрутов
  if (request.nextUrl.pathname.startsWith('/(authenticated)') || 
      request.nextUrl.pathname.startsWith('/(admin)')) {
    // Здесь логика проверки аутентификации
    const isAuthenticated = // ... проверка
    
    if (!isAuthenticated) {
      return NextResponse.redirect(new URL('/auth/login', request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: ['/(authenticated)/:path*', '/(admin)/:path*']
}
```

Такая структура обеспечивает:
- Четкое разделение публичного и защищенного контента
- Легкое масштабирование приложения
- Простую навигацию по проекту
- Возможность переиспользования компонентов
- Типобезопасность с TypeScript
